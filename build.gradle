import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

def userHome = System.getProperty('user.home')
ext.installBinDir = "${userHome}/.sdkman/bin"
ext.installSrcDir = "${userHome}/.sdkman/src"

ext.defaultSdkManVersion = '1.0.0-SNAPSHOT'

loadConfiguration()

repositories {
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy:2.4.5'
    compile 'org.codehaus.groovy:groovy-templates:2.4.5'
    compile 'org.codehaus.groovy:groovy-json:2.4.5'
    testCompile 'junit:junit:4.11'
    testCompile 'info.cukes:cucumber-groovy:1.1.8'
    testCompile 'info.cukes:cucumber-junit:1.1.8'
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude module: 'groovy-all'
    }
    testCompile 'com.github.tomakehurst:wiremock:1.46'
}

test.testLogging.exceptionFormat = 'full'

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'local'
    ext.environment = environment
    println "Environment is set to: $environment"
    
    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    ext.config = config
}

task prepareTestScripts(type: Copy) {
    from 'src/main/bash'
    into 'build/testScripts'
    include '**/*'
    filter(ReplaceTokens, tokens:
        [
            SDKMAN_VERSION          : "x.y.z",
            SDKMAN_SERVICE          : config.sdkmanService,
            SDKMAN_BROKER_SERVICE   : config.sdkmanBrokerService,
            SDKMAN_BROADCAST_SERVICE: config.sdkmanBroadcastService
        ]
    )
}

test.dependsOn prepareTestScripts

task prepareScripts(type: Copy) {
    from 'src/main/bash'
    into 'build/scripts'
    include '**/*'
    filter(ReplaceTokens, tokens:
        [
            SDKMAN_VERSION          : config.sdkmanVersion ?: defaultSdkManVersion,
            SDKMAN_SERVICE          : config.sdkmanService,
            SDKMAN_BROKER_SERVICE   : config.sdkmanBrokerService,
            SDKMAN_BROADCAST_SERVICE: config.sdkmanBroadcastService
        ]
    )
}

task assembleArchive(type: Zip, dependsOn: [test, prepareScripts]) {
	classifier = 'scripts'
	from "build/scripts"
	include "sdkman*"
}

assemble.dependsOn assembleArchive

task cleanInstallInit(type: Delete) {
	delete installBinDir
}

task cleanInstallModules(type: Delete) {
    delete installSrcDir
}

task installInit(type: Copy, dependsOn: [cleanInstallInit, prepareScripts]) {
	from "build/scripts"
	into installBinDir
	include "sdkman-init.sh"
}

task installModules(type: Copy, dependsOn: [cleanInstallModules, prepareScripts]) {
    from "build/scripts"
    into installSrcDir
    include "sdkman-*.sh"
    exclude "sdkman-init.sh"
}

task install(dependsOn: [installInit, installModules])
